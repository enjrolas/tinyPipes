
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000800c  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020c  00007e00  00007e00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  00000280  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002a8  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000015d  00000000  00000000  00000552  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001a0  00000000  00000000  000006af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000008c  00000000  00000000  00000850  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000014a  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002ad  00000000  00000000  00000a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000cd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007e00 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    7e00:	11 24       	eor	r1, r1
#ifdef __AVR_ATmega8__
  SP=RAMEND;  // This is done by hardware reset
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    7e02:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    7e04:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart();
    7e06:	81 ff       	sbrs	r24, 1
    7e08:	fc d0       	rcall	.+504    	; 0x8002 <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7e0a:	85 e0       	ldi	r24, 0x05	; 5
    7e0c:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
    7e10:	82 e0       	ldi	r24, 0x02	; 2
    7e12:	80 93 c0 00 	sts	0x00C0, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    7e16:	88 e1       	ldi	r24, 0x18	; 24
    7e18:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    7e1c:	86 e0       	ldi	r24, 0x06	; 6
    7e1e:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7e22:	80 e1       	ldi	r24, 0x10	; 16
    7e24:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
    7e28:	8e e0       	ldi	r24, 0x0E	; 14
    7e2a:	d5 d0       	rcall	.+426    	; 0x7fd6 <watchdogConfig>

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7e2c:	25 9a       	sbi	0x04, 5	; 4
    7e2e:	26 e0       	ldi	r18, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e30:	80 e3       	ldi	r24, 0x30	; 48
    7e32:	9c ef       	ldi	r25, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    7e34:	31 e0       	ldi	r19, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e36:	90 93 85 00 	sts	0x0085, r25
    7e3a:	80 93 84 00 	sts	0x0084, r24
    TIFR1 = _BV(TOV1);
    7e3e:	36 bb       	out	0x16, r19	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7e40:	b0 9b       	sbis	0x16, 0	; 22
    7e42:	fe cf       	rjmp	.-4      	; 0x7e40 <main+0x40>
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    7e44:	1d 9a       	sbi	0x03, 5	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7e46:	a8 95       	wdr
    7e48:	21 50       	subi	r18, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    7e4a:	a9 f7       	brne	.-22     	; 0x7e36 <main+0x36>
    7e4c:	00 e0       	ldi	r16, 0x00	; 0
    7e4e:	10 e0       	ldi	r17, 0x00	; 0
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7e50:	ee 24       	eor	r14, r14
    7e52:	e3 94       	inc	r14
        addrPtr += 2;
      } while (--ch);

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7e54:	f5 e0       	ldi	r31, 0x05	; 5
    7e56:	df 2e       	mov	r13, r31
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7e58:	a1 e1       	ldi	r26, 0x11	; 17
    7e5a:	ca 2e       	mov	r12, r26
      do *bufPtr++ = getch();
      while (--length);

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7e5c:	b3 e0       	ldi	r27, 0x03	; 3
    7e5e:	fb 2e       	mov	r15, r27
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7e60:	ae d0       	rcall	.+348    	; 0x7fbe <getch>

    if(ch == STK_GET_PARAMETER) {
    7e62:	81 34       	cpi	r24, 0x41	; 65
    7e64:	89 f4       	brne	.+34     	; 0x7e88 <main+0x88>
      unsigned char which = getch();
    7e66:	ab d0       	rcall	.+342    	; 0x7fbe <getch>
      verifySpace();
    7e68:	89 83       	std	Y+1, r24	; 0x01
    7e6a:	bb d0       	rcall	.+374    	; 0x7fe2 <verifySpace>
      if (which == 0x82) {
    7e6c:	89 81       	ldd	r24, Y+1	; 0x01
    7e6e:	82 38       	cpi	r24, 0x82	; 130
    7e70:	19 f4       	brne	.+6      	; 0x7e78 <main+0x78>
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
    7e72:	84 e0       	ldi	r24, 0x04	; 4
    7e74:	9d d0       	rcall	.+314    	; 0x7fb0 <putch>
    7e76:	99 c0       	rjmp	.+306    	; 0x7faa <main+0x1aa>
      } else if (which == 0x81) {
    7e78:	81 38       	cpi	r24, 0x81	; 129
    7e7a:	19 f4       	brne	.+6      	; 0x7e82 <main+0x82>
	  putch(OPTIBOOT_MAJVER);
    7e7c:	84 e0       	ldi	r24, 0x04	; 4
    7e7e:	98 d0       	rcall	.+304    	; 0x7fb0 <putch>
    7e80:	94 c0       	rjmp	.+296    	; 0x7faa <main+0x1aa>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    7e82:	83 e0       	ldi	r24, 0x03	; 3
    7e84:	95 d0       	rcall	.+298    	; 0x7fb0 <putch>
    7e86:	91 c0       	rjmp	.+290    	; 0x7faa <main+0x1aa>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    7e88:	82 34       	cpi	r24, 0x42	; 66
    7e8a:	19 f4       	brne	.+6      	; 0x7e92 <main+0x92>
      // SET DEVICE is ignored
      getNch(20);
    7e8c:	84 e1       	ldi	r24, 0x14	; 20
    7e8e:	b1 d0       	rcall	.+354    	; 0x7ff2 <getNch>
    7e90:	8c c0       	rjmp	.+280    	; 0x7faa <main+0x1aa>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    7e92:	85 34       	cpi	r24, 0x45	; 69
    7e94:	19 f4       	brne	.+6      	; 0x7e9c <main+0x9c>
      // SET DEVICE EXT is ignored
      getNch(5);
    7e96:	85 e0       	ldi	r24, 0x05	; 5
    7e98:	ac d0       	rcall	.+344    	; 0x7ff2 <getNch>
    7e9a:	87 c0       	rjmp	.+270    	; 0x7faa <main+0x1aa>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7e9c:	85 35       	cpi	r24, 0x55	; 85
    7e9e:	71 f4       	brne	.+28     	; 0x7ebc <main+0xbc>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    7ea0:	8e d0       	rcall	.+284    	; 0x7fbe <getch>
    7ea2:	a8 2e       	mov	r10, r24
    7ea4:	bb 24       	eor	r11, r11
      newAddress = (newAddress & 0xff) | (getch() << 8);
    7ea6:	8b d0       	rcall	.+278    	; 0x7fbe <getch>
    7ea8:	08 2f       	mov	r16, r24
    7eaa:	10 e0       	ldi	r17, 0x00	; 0
    7eac:	10 2f       	mov	r17, r16
    7eae:	00 27       	eor	r16, r16
    7eb0:	0a 29       	or	r16, r10
    7eb2:	1b 29       	or	r17, r11
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    7eb4:	00 0f       	add	r16, r16
    7eb6:	11 1f       	adc	r17, r17
      address = newAddress;
      verifySpace();
    7eb8:	94 d0       	rcall	.+296    	; 0x7fe2 <verifySpace>
    7eba:	77 c0       	rjmp	.+238    	; 0x7faa <main+0x1aa>
    }
    else if(ch == STK_UNIVERSAL) {
    7ebc:	86 35       	cpi	r24, 0x56	; 86
    7ebe:	29 f4       	brne	.+10     	; 0x7eca <main+0xca>
      // UNIVERSAL command is ignored
      getNch(4);
    7ec0:	84 e0       	ldi	r24, 0x04	; 4
    7ec2:	97 d0       	rcall	.+302    	; 0x7ff2 <getNch>
      putch(0x00);
    7ec4:	80 e0       	ldi	r24, 0x00	; 0
    7ec6:	74 d0       	rcall	.+232    	; 0x7fb0 <putch>
    7ec8:	70 c0       	rjmp	.+224    	; 0x7faa <main+0x1aa>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7eca:	84 36       	cpi	r24, 0x64	; 100
    7ecc:	09 f0       	breq	.+2      	; 0x7ed0 <main+0xd0>
    7ece:	43 c0       	rjmp	.+134    	; 0x7f56 <main+0x156>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    7ed0:	76 d0       	rcall	.+236    	; 0x7fbe <getch>
      length = getch();
    7ed2:	75 d0       	rcall	.+234    	; 0x7fbe <getch>
    7ed4:	b8 2e       	mov	r11, r24
      getch();
    7ed6:	73 d0       	rcall	.+230    	; 0x7fbe <getch>

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7ed8:	80 e7       	ldi	r24, 0x70	; 112
    7eda:	00 30       	cpi	r16, 0x00	; 0
    7edc:	18 07       	cpc	r17, r24
    7ede:	38 f4       	brcc	.+14     	; 0x7eee <main+0xee>
    7ee0:	f8 01       	movw	r30, r16
    7ee2:	f7 be       	out	0x37, r15	; 55
    7ee4:	e8 95       	spm
    7ee6:	81 2c       	mov	r8, r1
    7ee8:	61 e0       	ldi	r22, 0x01	; 1
    7eea:	96 2e       	mov	r9, r22
    7eec:	03 c0       	rjmp	.+6      	; 0x7ef4 <main+0xf4>
    7eee:	81 2c       	mov	r8, r1
    7ef0:	51 e0       	ldi	r21, 0x01	; 1
    7ef2:	95 2e       	mov	r9, r21

      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    7ef4:	64 d0       	rcall	.+200    	; 0x7fbe <getch>
    7ef6:	f4 01       	movw	r30, r8
    7ef8:	81 93       	st	Z+, r24
    7efa:	4f 01       	movw	r8, r30
      while (--length);
    7efc:	be 16       	cp	r11, r30
    7efe:	d1 f7       	brne	.-12     	; 0x7ef4 <main+0xf4>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7f00:	f0 e7       	ldi	r31, 0x70	; 112
    7f02:	00 30       	cpi	r16, 0x00	; 0
    7f04:	1f 07       	cpc	r17, r31
    7f06:	18 f0       	brcs	.+6      	; 0x7f0e <main+0x10e>
    7f08:	f8 01       	movw	r30, r16
    7f0a:	f7 be       	out	0x37, r15	; 55
    7f0c:	e8 95       	spm

      // Read command terminator, start reply
      verifySpace();
    7f0e:	69 d0       	rcall	.+210    	; 0x7fe2 <verifySpace>

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    7f10:	07 b6       	in	r0, 0x37	; 55
    7f12:	00 fc       	sbrc	r0, 0
    7f14:	fd cf       	rjmp	.-6      	; 0x7f10 <main+0x110>
    7f16:	f8 01       	movw	r30, r16
    7f18:	a0 e0       	ldi	r26, 0x00	; 0
    7f1a:	b1 e0       	ldi	r27, 0x01	; 1
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    7f1c:	2c 91       	ld	r18, X
    7f1e:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    7f20:	11 96       	adiw	r26, 0x01	; 1
    7f22:	8c 91       	ld	r24, X
    7f24:	11 97       	sbiw	r26, 0x01	; 1
    7f26:	90 e0       	ldi	r25, 0x00	; 0
    7f28:	98 2f       	mov	r25, r24
    7f2a:	88 27       	eor	r24, r24
    7f2c:	82 2b       	or	r24, r18
    7f2e:	93 2b       	or	r25, r19
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
    7f30:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7f32:	0c 01       	movw	r0, r24
    7f34:	e7 be       	out	0x37, r14	; 55
    7f36:	e8 95       	spm
    7f38:	11 24       	eor	r1, r1
        addrPtr += 2;
    7f3a:	32 96       	adiw	r30, 0x02	; 2
      } while (--ch);
    7f3c:	81 e0       	ldi	r24, 0x01	; 1
    7f3e:	a0 38       	cpi	r26, 0x80	; 128
    7f40:	b8 07       	cpc	r27, r24
    7f42:	61 f7       	brne	.-40     	; 0x7f1c <main+0x11c>

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7f44:	f8 01       	movw	r30, r16
    7f46:	d7 be       	out	0x37, r13	; 55
    7f48:	e8 95       	spm
      boot_spm_busy_wait();
    7f4a:	07 b6       	in	r0, 0x37	; 55
    7f4c:	00 fc       	sbrc	r0, 0
    7f4e:	fd cf       	rjmp	.-6      	; 0x7f4a <main+0x14a>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7f50:	c7 be       	out	0x37, r12	; 55
    7f52:	e8 95       	spm
    7f54:	2a c0       	rjmp	.+84     	; 0x7faa <main+0x1aa>
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7f56:	84 37       	cpi	r24, 0x74	; 116
    7f58:	b9 f4       	brne	.+46     	; 0x7f88 <main+0x188>
      // READ PAGE - we only read flash
      getch();			/* getlen() */
    7f5a:	31 d0       	rcall	.+98     	; 0x7fbe <getch>
      length = getch();
    7f5c:	30 d0       	rcall	.+96     	; 0x7fbe <getch>
    7f5e:	a8 2e       	mov	r10, r24
      getch();
    7f60:	2e d0       	rcall	.+92     	; 0x7fbe <getch>

      verifySpace();
    7f62:	3f d0       	rcall	.+126    	; 0x7fe2 <verifySpace>
    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
      // READ PAGE - we only read flash
      getch();			/* getlen() */
      length = getch();
    7f64:	ba 2c       	mov	r11, r10
      getch();

      verifySpace();
    7f66:	f8 01       	movw	r30, r16
    7f68:	01 c0       	rjmp	.+2      	; 0x7f6c <main+0x16c>
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    7f6a:	f4 01       	movw	r30, r8
    7f6c:	4f 01       	movw	r8, r30
    7f6e:	08 94       	sec
    7f70:	81 1c       	adc	r8, r1
    7f72:	91 1c       	adc	r9, r1
    7f74:	84 91       	lpm	r24, Z
    7f76:	1c d0       	rcall	.+56     	; 0x7fb0 <putch>
      while (--length);
    7f78:	ba 94       	dec	r11
    7f7a:	b9 f7       	brne	.-18     	; 0x7f6a <main+0x16a>
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
    7f7c:	0f 5f       	subi	r16, 0xFF	; 255
    7f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    7f80:	aa 94       	dec	r10
    7f82:	0a 0d       	add	r16, r10
    7f84:	11 1d       	adc	r17, r1
    7f86:	11 c0       	rjmp	.+34     	; 0x7faa <main+0x1aa>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7f88:	85 37       	cpi	r24, 0x75	; 117
    7f8a:	41 f4       	brne	.+16     	; 0x7f9c <main+0x19c>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7f8c:	2a d0       	rcall	.+84     	; 0x7fe2 <verifySpace>
      putch(SIGNATURE_0);
    7f8e:	8e e1       	ldi	r24, 0x1E	; 30
    7f90:	0f d0       	rcall	.+30     	; 0x7fb0 <putch>
      putch(SIGNATURE_1);
    7f92:	85 e9       	ldi	r24, 0x95	; 149
    7f94:	0d d0       	rcall	.+26     	; 0x7fb0 <putch>
      putch(SIGNATURE_2);
    7f96:	8f e0       	ldi	r24, 0x0F	; 15
    7f98:	0b d0       	rcall	.+22     	; 0x7fb0 <putch>
    7f9a:	07 c0       	rjmp	.+14     	; 0x7faa <main+0x1aa>
    }
    else if (ch == 'Q') {
    7f9c:	81 35       	cpi	r24, 0x51	; 81
    7f9e:	21 f4       	brne	.+8      	; 0x7fa8 <main+0x1a8>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    7fa0:	88 e0       	ldi	r24, 0x08	; 8
    7fa2:	19 d0       	rcall	.+50     	; 0x7fd6 <watchdogConfig>
      verifySpace();
    7fa4:	1e d0       	rcall	.+60     	; 0x7fe2 <verifySpace>
    7fa6:	01 c0       	rjmp	.+2      	; 0x7faa <main+0x1aa>
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7fa8:	1c d0       	rcall	.+56     	; 0x7fe2 <verifySpace>
    }
    putch(STK_OK);
    7faa:	80 e1       	ldi	r24, 0x10	; 16
    7fac:	01 d0       	rcall	.+2      	; 0x7fb0 <putch>
  }
    7fae:	58 cf       	rjmp	.-336    	; 0x7e60 <main+0x60>

00007fb0 <putch>:
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    7fb0:	90 91 c0 00 	lds	r25, 0x00C0
    7fb4:	95 ff       	sbrs	r25, 5
    7fb6:	fc cf       	rjmp	.-8      	; 0x7fb0 <putch>
  UDR0 = ch;
    7fb8:	80 93 c6 00 	sts	0x00C6, r24
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    7fbc:	08 95       	ret

00007fbe <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    7fbe:	80 91 c0 00 	lds	r24, 0x00C0
    7fc2:	87 ff       	sbrs	r24, 7
    7fc4:	fc cf       	rjmp	.-8      	; 0x7fbe <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
    7fc6:	80 91 c0 00 	lds	r24, 0x00C0
    7fca:	84 fd       	sbrc	r24, 4
    7fcc:	01 c0       	rjmp	.+2      	; 0x7fd0 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7fce:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
    7fd0:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7fd4:	08 95       	ret

00007fd6 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fd6:	e0 e6       	ldi	r30, 0x60	; 96
    7fd8:	f0 e0       	ldi	r31, 0x00	; 0
    7fda:	98 e1       	ldi	r25, 0x18	; 24
    7fdc:	90 83       	st	Z, r25
  WDTCSR = x;
    7fde:	80 83       	st	Z, r24
}
    7fe0:	08 95       	ret

00007fe2 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7fe2:	ed df       	rcall	.-38     	; 0x7fbe <getch>
    7fe4:	80 32       	cpi	r24, 0x20	; 32
    7fe6:	19 f0       	breq	.+6      	; 0x7fee <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7fe8:	88 e0       	ldi	r24, 0x08	; 8
    7fea:	f5 df       	rcall	.-22     	; 0x7fd6 <watchdogConfig>
    7fec:	ff cf       	rjmp	.-2      	; 0x7fec <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7fee:	84 e1       	ldi	r24, 0x14	; 20
    7ff0:	df cf       	rjmp	.-66     	; 0x7fb0 <putch>

00007ff2 <getNch>:
}
    7ff2:	cf 93       	push	r28
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7ff4:	c8 2f       	mov	r28, r24
    7ff6:	e3 df       	rcall	.-58     	; 0x7fbe <getch>
  do getch(); while (--count);
    7ff8:	c1 50       	subi	r28, 0x01	; 1
    7ffa:	e9 f7       	brne	.-6      	; 0x7ff6 <getNch+0x4>
    7ffc:	f2 df       	rcall	.-28     	; 0x7fe2 <verifySpace>
  verifySpace();
    7ffe:	cf 91       	pop	r28
}
    8000:	08 95       	ret

00008002 <appStart>:
    8002:	80 e0       	ldi	r24, 0x00	; 0
  WDTCSR = _BV(WDCE) | _BV(WDE);
  WDTCSR = x;
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
    8004:	e8 df       	rcall	.-48     	; 0x7fd6 <watchdogConfig>
    8006:	ee 27       	eor	r30, r30
  __asm__ __volatile__ (
    8008:	ff 27       	eor	r31, r31
    800a:	09 94       	ijmp
